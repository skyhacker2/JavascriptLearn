// Generated by CoffeeScript 1.6.3
(function() {
  var __slice = [].slice,
    __indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

  define(function(require) {
    var $, AutoComplete, bt, campaignsTpl, categoryTpl, datapicker, deleteTpl, filterCriteriaTpl, firstGuideTpl, formUtil, init, langResourceCampaign, langResourceCommon, mainTpl, render, rfl, _abortCampaign, _bindEvent, _clearCategoryCache, _data, _delCampaign, _doFilter, _getBase64Params, _listId, _render, _renderCategory, _renderFilter, _sideBarPinned, _statusAutoComplete;
    $ = require('jquery');
    bt = require('bootstrap');
    rfl = require('rfl');
    AutoComplete = require('auto-complete');
    datapicker = require('datepicker');
    formUtil = require('form-util');
    langResourceCommon = require("../../lang/" + G.LANG + "/common");
    langResourceCampaign = require("../../lang/" + G.LANG + "/campaign");
    mainTpl = require('./list.tpl.html');
    categoryTpl = require('./list-category.tpl.html');
    campaignsTpl = require('./list-campaigns.tpl.html');
    firstGuideTpl = require('./list-first-guide.tpl.html');
    filterCriteriaTpl = require('./list-filter-criteria.tpl.html');
    deleteTpl = require('./delete-campaign.tpl.html');
    _listId = '';
    _data = null;
    _sideBarPinned = rfl.localStorage.get('CAMPAIGNS_SIDE_BAR_PINNED');
    _clearCategoryCache = '';
    _statusAutoComplete = null;
    _delCampaign = function(i) {
      return rfl.util.typeConfirm('DELETE', deleteTpl.render(_data.campaigns[i]), function() {
        return rfl.ajax.del({
          queueName: 'delCampaign',
          url: "lists/campaigns/" + _data.campaigns[i].id,
          success: function(res) {
            if (res.code === 0) {
              _clearCategoryCache = 'true';
              rfl.alerts.show(res.message, 'success');
              return render();
            } else {
              return rfl.alerts.show(res.message, 'error');
            }
          },
          error: function() {
            return rfl.alerts.show(langResourceCommon.msg.serverBusy, 'error');
          }
        });
      });
    };
    _abortCampaign = function(i) {
      return rfl.alerts.confirm(rfl.util.formatMsg(langResourceCampaign.msg.abortCampaignConfirm, [_data.campaigns[i].name]), function() {
        return rfl.ajax.put({
          queueName: 'abortCampaign',
          url: "lists/campaigns/" + _data.campaigns[i].id + "/interrupt",
          success: function(res) {
            if (res.code === 0) {
              _clearCategoryCache = 'true';
              rfl.alerts.show(res.message, 'success');
              return render();
            } else {
              return rfl.alerts.show(res.message, 'error');
            }
          },
          error: function() {
            return rfl.alerts.show(langResourceCommon.msg.serverBusy, 'error');
          }
        });
      }, {
        makeSure: true
      });
    };
    _getBase64Params = function(callback) {
      return rfl.util.toBase64({
        listId: _listId,
        listName: _data.listName
      }, function(res) {
        return callback(res);
      });
    };
    _doFilter = function(evt) {
      var campaignName, campaignStatus, creationDateFrom, creationDateTo, valid;
      valid = formUtil.validate('#campaign-filter-form');
      if (!valid.passed) {
        return;
      }
      creationDateFrom = valid.data.creationDateFrom && valid.data.creationDateFrom.getTime() || '';
      creationDateTo = valid.data.creationDateTo && valid.data.creationDateTo.getTime() || '';
      campaignStatus = _statusAutoComplete.getSelectedPropList('id')[0] || '';
      campaignName = encodeURIComponent($.trim($('#filter-campaign-name').val()));
      if (creationDateFrom && creationDateTo && creationDateTo < creationDateFrom) {
        formUtil.highLight('#creation-data-to', 'Must be greater than creation date from.');
        return;
      }
      rfl.ajax.history.dispatch(function(mark, listId, status, page, sortKey, sortOrder) {
        if (status == null) {
          status = '';
        }
        if (page == null) {
          page = '';
        }
        if (sortKey == null) {
          sortKey = '';
        }
        if (sortOrder == null) {
          sortOrder = '';
        }
        return rfl.util.gotoUrl("campaign/list#!" + listId + "/" + campaignStatus + "/" + page + "/" + sortKey + "/" + sortOrder + "/" + creationDateFrom + "/" + creationDateTo + "/" + campaignName);
      });
      return $(evt.target).closest('.btn-group').removeClass('open');
    };
    _bindEvent = function() {
      rfl.Delegator.getPageDelegator().delegate('click', 'createCampaign', function(evt, type) {
        return _getBase64Params(function(res) {
          if (type) {
            return rfl.util.gotoUrl("campaign/edit#!create/" + res + "/campaign//" + type);
          } else {
            return rfl.util.gotoUrl("campaign/edit#!create/" + res + "/campaign//regular");
          }
        });
      }, 1).delegate('click', 'delCampaign', function(evt, i) {
        var campaign;
        campaign = _data.campaigns[i];
        return _delCampaign(parseInt(i));
      }, 1).delegate('click', 'abortCampaign', function(evt, i) {
        var campaign;
        campaign = _data.campaigns[i];
        return _abortCampaign(parseInt(i));
      }, 1).delegate('click', 'toggleSideBarPin', function(evt) {
        if (_sideBarPinned) {
          _sideBarPinned = '';
          rfl.localStorage.set('CAMPAIGNS_SIDE_BAR_PINNED', _sideBarPinned);
          return $('#campaign-side-bar').removeClass('pinned');
        } else {
          _sideBarPinned = '1';
          rfl.localStorage.set('CAMPAIGNS_SIDE_BAR_PINNED', _sideBarPinned);
          return $('#campaign-side-bar').addClass('pinned');
        }
      }, 1).delegate('click', 'previewHtmlContent', function(evt, i) {
        var campaign;
        campaign = _data.campaigns[i];
        return require(['./preview-main'], function(mod) {
          return mod.init(_listId, campaign.id);
        });
      }).delegate('click', 'doFilterCampaigns', function(evt) {
        return _doFilter(evt);
      }).delegate('keyup', 'keyupFilterCampaigns', function(evt) {
        if (evt.keyCode === 13) {
          $('#creation-data-from').closest('.input-group').datepicker('hide');
          $('#creation-data-to').closest('.input-group').datepicker('hide');
          return _doFilter(evt);
        }
      }).delegate('click', 'removeFilterCriteria', function(evt, seqs) {
        seqs = seqs.split('_');
        return rfl.ajax.history.dispatch(function() {
          var args, args2, i, item;
          args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
          args.shift();
          args2 = (function() {
            var _i, _len, _ref, _results;
            _results = [];
            for (i = _i = 0, _len = args.length; _i < _len; i = ++_i) {
              item = args[i];
              _results.push((_ref = i + '', __indexOf.call(seqs, _ref) >= 0) ? '' : item);
            }
            return _results;
          })();
          return rfl.util.gotoUrl('campaign/list#!' + args2.join('/'));
        });
      }, 1);
      return _bindEvent = rfl.empty;
    };
    _renderCategory = function(status) {
      return require(['ajax!' + G.getAjaxLoadUrl("lists/" + _listId + "/campaignAmountByStatus@noCache=" + _clearCategoryCache)], function(res) {
        var i, item, list;
        if (rfl.ajax.dealCommonCode(res.code)) {
          return;
        }
        if (res.code === 0) {
          _clearCategoryCache = '';
          list = (function() {
            var _i, _len, _ref, _results;
            _ref = res.data;
            _results = [];
            for (i = _i = 0, _len = _ref.length; _i < _len; i = ++_i) {
              item = _ref[i];
              if (item.status !== 'ALL' && item.amount > 0) {
                _results.push(item);
              }
            }
            return _results;
          })();
          _statusAutoComplete && _statusAutoComplete.destroy();
          _statusAutoComplete = new AutoComplete('#filter-campaign-status', {
            richSelectionResult: true,
            excludeExist: true,
            maxSelection: 1,
            dataSource: list,
            getRichItemText: function(item, stdItem) {
              return stdItem.name + '(' + item.amount + ')';
            },
            getListItemText: function(item, stdItem) {
              return stdItem.name + '(' + item.amount + ')';
            },
            getStdItem: function(item, from) {
              return {
                id: item.status,
                name: langResourceCampaign.status[item.status]
              };
            }
          });
          if (status && status !== 'ALL') {
            return _statusAutoComplete.addSelectedItem({
              status: status
            });
          }
        } else {
          return rfl.alerts.show(res.message, 'error');
        }
      }, function() {
        return rfl.alerts.show(langResourceCommon.msg.serverBusy, 'error');
      });
    };
    _renderFilter = function(creationDateFrom, creationDateTo, campaignStatus, campaignName) {
      $('#filter-criteria-div').html(filterCriteriaTpl.render({
        creationDateFrom: creationDateFrom && rfl.util.formatDateTime(+creationDateFrom, 'yyyy-MM-dd'),
        creationDateTo: creationDateTo && rfl.util.formatDateTime(+creationDateTo, 'yyyy-MM-dd'),
        campaignStatus: campaignStatus,
        campaignName: decodeURIComponent(campaignName),
        lang: {
          common: langResourceCommon,
          campaign: langResourceCampaign
        }
      }));
      if (creationDateFrom) {
        $('#creation-data-from').val(rfl.util.formatDateTime(+creationDateFrom, 'yyyy-MM-dd'));
      } else {
        $('#creation-data-from').val('');
      }
      if (creationDateTo) {
        $('#creation-data-to').val(rfl.util.formatDateTime(+creationDateTo, 'yyyy-MM-dd'));
      } else {
        $('#creation-data-to').val('');
      }
      $('#filter-campaign-name').val(decodeURIComponent(campaignName));
      if (_statusAutoComplete && !campaignStatus) {
        return _statusAutoComplete.clear();
      }
    };
    _render = function(mark, listId, status, page, sortKey, sortOrder, creationDateFrom, creationDateTo, campaignName) {
      if (page == null) {
        page = 1;
      }
      if (sortKey == null) {
        sortKey = '';
      }
      if (sortOrder == null) {
        sortOrder = '';
      }
      if (creationDateFrom == null) {
        creationDateFrom = '';
      }
      if (creationDateTo == null) {
        creationDateTo = '';
      }
      if (campaignName == null) {
        campaignName = '';
      }
      if (!listId) {
        return rfl.ui.renderInvalidUrl('#main-div');
      }
      G.listId = listId;
      _listId = listId;
      _bindEvent();
      _renderCategory(status);
      _renderFilter(creationDateFrom, creationDateTo, status, campaignName);
      return rfl.ajax.get({
        url: "lists/" + listId + "/campaigns",
        data: {
          pageNumber: page - 1,
          pageSize: G.ITEMS_PER_PAGE,
          property: sortKey,
          direction: sortOrder,
          status: status,
          start: creationDateFrom,
          end: creationDateTo,
          key: decodeURIComponent(campaignName)
        },
        success: function(res) {
          if (res.code === 0) {
            _data = res.data;
            return _getBase64Params(function(base64Params) {
              return $('#campaign-list-div').html(campaignsTpl.render({
                listId: listId,
                base64Params: base64Params,
                campaigns: _data.campaigns,
                totalItems: _data.total,
                page: page,
                ajaxPagerUrlPattern: [listId, status, '{{page}}', sortKey, sortOrder].join('/'),
                lang: {
                  common: langResourceCommon,
                  campaign: langResourceCampaign
                }
              }, {
                util: rfl.util
              }));
            });
          } else {
            return rfl.ui.renderPageLoadError('#main-div', {
              content: res.message
            });
          }
        },
        error: function(res) {
          return rfl.ui.renderPageLoadError('#main-div');
        }
      });
    };
    render = function() {
      var args;
      args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
      if (args.length) {
        return _render.apply(null, args);
      } else {
        return rfl.ajax.history.dispatch(function() {
          var args;
          args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
          return _render.apply(null, args);
        });
      }
    };
    init = function() {
      if (!rfl.auth.checkAndWarn('PERM_USER_ADMIN')) {
        return;
      }
      $('#main-div').html(mainTpl.render({
        listId: '',
        listName: '',
        dateFormat: 'yyyy-MM-dd',
        lang: {
          common: langResourceCommon,
          campaign: langResourceCampaign
        }
      }));
      rfl.ajax.history.init(8, render);
      $('#creation-data-from').closest('.input-group').datepicker().on('changeDate', function(evt) {
        if (evt.viewMode === 'days') {
          return $('#creation-data-from').closest('.input-group').datepicker('hide');
        }
      });
      $('#creation-data-to').closest('.input-group').datepicker().on('changeDate', function(evt) {
        if (evt.viewMode === 'days') {
          return $('#creation-data-to').closest('.input-group').datepicker('hide');
        }
      });
      rfl.css.load('js/lib/datepicker/main.css');
      return formUtil.setCommonMsg(langResourceCommon.msg.validator);
    };
    return {
      init: init
    };
  });

}).call(this);
