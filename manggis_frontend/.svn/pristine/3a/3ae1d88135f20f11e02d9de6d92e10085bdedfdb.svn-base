// Generated by CoffeeScript 1.6.3
(function() {
  var __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  define(function(require) {
    var $, Property, PropertyList, Spine, langResourceCommon, langResourceCustomer, rfl, _ref;
    $ = require('jquery');
    Spine = require('spine');
    rfl = require('rfl');
    langResourceCommon = require('lang/{{G.LANG}}/common');
    langResourceCustomer = require('lang/{{G.LANG}}/customer');
    Property = require('../models/property');
    PropertyList = (function(_super) {
      __extends(PropertyList, _super);

      function PropertyList() {
        this.del = __bind(this.del, this);
        this.render = __bind(this.render, this);
        this.ajaxError = __bind(this.ajaxError, this);
        _ref = PropertyList.__super__.constructor.apply(this, arguments);
        return _ref;
      }

      PropertyList.init = function(options) {
        return this.instance = new PropertyList(options);
      };

      PropertyList.prototype.events = {
        'click [data-del-btn]': 'del'
      };

      PropertyList.prototype.template = require('../views/property-list.tpl.html');

      PropertyList.prototype.init = function() {
        var _this = this;
        Property.on('refresh', this.render);
        Property.on('ajaxError ajaxBizError', this.ajaxError);
        this.routes({
          '!/:listId': function(params) {
            _this.listId = params.listId;
            Property.setListId(_this.listId);
            return Property.ajaxFetch();
          },
          '*glob': function(params) {
            return rfl.ui.renderInvalidUrl('#main-div');
          }
        });
        return Spine.Route.setup();
      };

      PropertyList.prototype.ajaxError = function(record, type, res, status, xhr) {
        if (!rfl.ajax.dealCommonCode(res.code)) {
          return rfl.alerts.show(res.message || langResourceCommon.msg.serverBusy, 'error');
        }
      };

      PropertyList.prototype.render = function() {
        return this.html(this.template.render({
          listId: this.listId,
          propertys: Property.all()
        }));
      };

      PropertyList.prototype.del = function(evt) {
        var id, property;
        id = $(evt.target).closest('tr').data('id');
        property = Property.find(id);
        return rfl.alerts.confirm(rfl.util.formatMsg(langResourceCustomer.msg.delPropertyConfirm, [property.name]), function() {
          return property.ajaxDestroy({
            done: function(res) {
              rfl.alerts.show(res.message, 'success');
              return Property.ajaxFetch();
            }
          });
        }, {
          makeSure: true
        });
      };

      return PropertyList;

    })(Spine.Controller);
    return PropertyList;
  });

}).call(this);
