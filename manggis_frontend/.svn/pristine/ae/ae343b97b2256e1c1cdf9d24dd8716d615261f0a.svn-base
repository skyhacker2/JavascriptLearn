// Generated by CoffeeScript 1.6.3
(function() {
  define(function(require) {
    var $, AutoComplete, formUtil, langResourceCampaign, langResourceCommon, mainTpl, rfl, show, _bindEvent, _customerAc, _customerHistoryAc, _dialog, _emailAc, _initCustomerHistoryAc;
    $ = require('jquery');
    rfl = require('rfl');
    formUtil = require('form-util');
    AutoComplete = require('auto-complete');
    langResourceCommon = require("../../lang/" + G.LANG + "/common");
    langResourceCampaign = require("../../lang/" + G.LANG + "/campaign");
    mainTpl = require('./sample-sender.tpl.html');
    _dialog = null;
    _emailAc = null;
    _customerHistoryAc = null;
    _customerAc = null;
    _bindEvent = function() {
      rfl.Delegator.getPageDelegator().delegate('click', 'xxx', function(evt, type) {
        return 1;
      }, 1);
      rfl.ajax.history.on('change', function(evt) {
        if (_dialog) {
          return _dialog.modal('hide');
        }
      });
      return _bindEvent = rfl.empty;
    };
    _initCustomerHistoryAc = function(selectFirst) {
      var dataSource;
      dataSource = rfl.util.getLocalStoredList('FREQUENTLY_USED_CUSTOMER_LIST');
      if (_customerHistoryAc) {
        _customerHistoryAc.destroy();
      }
      _customerHistoryAc = new AutoComplete('#send-sample-customer', {
        freeInput: true,
        disableFilter: true,
        maxSelection: 1,
        listStyle: {
          width: 340
        },
        dataSource: dataSource,
        getStdItem: function(item, from) {
          return {
            id: item.id,
            name: from === 'LIST' ? "" + item.firstName + " " + item.lastName + " <" + item.email + ">" : item.email
          };
        },
        onSelect: function(item) {
          return _customerAc.match(item.email, function(customers, input) {
            if (!customers.length) {
              rfl.util.removeFromLocalStoredList('FREQUENTLY_USED_CUSTOMER_LIST', {
                email: input
              }, {
                comparer: function(a, b) {
                  return a.email === b.email;
                }
              });
              _initCustomerHistoryAc();
            }
            return _customerAc.renderList(customers, {
              matchedInput: input,
              autoSelect: true
            });
          });
        }
      });
      if (selectFirst && dataSource.length) {
        return _customerAc.match(dataSource[0].email, function(customers, input) {
          if (!customers.length) {
            rfl.util.removeFromLocalStoredList('FREQUENTLY_USED_CUSTOMER_LIST', {
              email: input
            }, {
              comparer: function(a, b) {
                return a.email === b.email;
              }
            });
            _initCustomerHistoryAc(true);
          }
          return _customerAc.renderList(customers, {
            matchedInput: input,
            autoSelect: true
          });
        });
      }
    };
    show = function(listId, campaignId, content, onSuccess) {
      _bindEvent();
      _dialog = rfl.dialog.create({
        show: false,
        title: 'Send yourself a test email',
        content: mainTpl.render(),
        btns: [
          {
            text: 'Send',
            className: 'btn-primary',
            click: function() {
              var emailList, valid;
              formUtil.setCommonMsg(langResourceCommon.msg.validator);
              valid = formUtil.validate('#send-sample-form');
              if (valid.passed) {
                emailList = $('#send-sample-emails').val().split(/\s*;\s*/);
                return rfl.ajax.post({
                  url: "lists/campaigns/" + campaignId + "/sendSample",
                  data: {
                    sendToEmails: emailList,
                    mergeCustomerId: _customerAc && _customerAc.getSelectedPropList('id')[0] || '',
                    html: content || ''
                  },
                  success: function(res) {
                    var email, _i, _len;
                    if (res.code === 0) {
                      for (_i = 0, _len = emailList.length; _i < _len; _i++) {
                        email = emailList[_i];
                        rfl.util.unshiftLocalStoredList('SEND_SAMPLE_EMAIL_LIST', email);
                      }
                      _dialog.modal('hide');
                      if (onSuccess) {
                        return onSuccess(res, $('#send-sample-emails').val());
                      } else {
                        return rfl.alerts.show(res.message, 'success');
                      }
                    } else {
                      return rfl.alerts.show(res.message, {
                        type: 'error',
                        container: '#send-sample-form'
                      });
                    }
                  },
                  error: function() {
                    return rfl.alerts.show(langResourceCommon.msg.serverBusy, {
                      type: 'error',
                      container: '#send-sample-form'
                    });
                  }
                });
              } else {
                return formUtil.focus(valid.failList[0].item);
              }
            }
          }, {
            text: 'Cancel',
            dismiss: true
          }
        ]
      });
      _dialog.on('shown.bs.modal', function() {
        var emailList;
        _customerAc = new AutoComplete('#send-sample-customer', {
          maxSelection: 1,
          listStyle: {
            width: 340
          },
          getStdItem: function(item, from) {
            return {
              id: item.id,
              name: from === 'LIST' ? "" + item.firstName + " " + item.lastName + " <" + item.email + ">" : item.email
            };
          },
          getMatchedList: function(input, callback) {
            return rfl.ajax.get({
              url: "lists/" + listId + "/searchCustomers",
              data: {
                key: input
              },
              success: function(res) {
                if (res.code === 0) {
                  if (callback) {
                    return callback(res.data.customers, input);
                  } else {
                    return _customerAc.renderList(res.data.customers, {
                      matchedInput: input
                    });
                  }
                } else {
                  return _customerAc.renderList(null, {
                    noResultMsg: res.message
                  });
                }
              },
              error: function() {
                return _customerAc.renderList(null, {
                  noResultMsg: langResourceCommon.msg.serverBusy
                });
              }
            });
          },
          onSelect: function(item) {
            rfl.util.unshiftLocalStoredList('FREQUENTLY_USED_CUSTOMER_LIST', item, {
              comparer: function(a, b) {
                return a.email === b.email;
              }
            });
            return _initCustomerHistoryAc();
          }
        });
        _initCustomerHistoryAc(true);
        emailList = rfl.util.getLocalStoredList('SEND_SAMPLE_EMAIL_LIST');
        if (emailList.length) {
          $('#send-sample-emails').val(emailList[0] && emailList[0] + '; ' || '');
          if (emailList.length > 1) {
            _emailAc = new AutoComplete('#send-sample-emails', {
              freeInput: true,
              dataSource: emailList,
              listStyle: {
                width: 340
              },
              onBeforeSelect: function(item) {
                if (new RegExp('(^|;|,)\\s*' + item.replace(/\./g, '\\.') + '\\s*(;|,|$)').test($('#send-sample-emails').val())) {
                  _emailAc.hideList();
                  return false;
                }
              },
              getStdItem: function(item) {
                return {
                  id: item,
                  name: item
                };
              }
            });
            return _emailAc.showFullList();
          }
        }
      });
      _dialog.on('hide', function() {
        if (_customerHistoryAc) {
          _customerHistoryAc.destroy();
        }
        if (_customerAc) {
          _customerAc.destroy();
        }
        if (_emailAc) {
          _emailAc.destroy();
        }
        _customerHistoryAc = null;
        _customerAc = null;
        _emailAc = null;
        return _dialog = null;
      });
      return _dialog.modal('show');
    };
    return {
      show: show
    };
  });

}).call(this);
