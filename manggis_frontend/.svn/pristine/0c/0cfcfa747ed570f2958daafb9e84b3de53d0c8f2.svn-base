// Generated by CoffeeScript 1.6.3
(function() {
  var __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  define(function(require) {
    var $, Group, GroupEdit, Spine, formUtil, langResourceCommon, langResourceGroup, rfl, _ref;
    $ = require('jquery');
    Spine = require('spine');
    rfl = require('rfl');
    formUtil = require('form-util');
    langResourceCommon = require('lang/{{G.LANG}}/common');
    langResourceGroup = require('lang/{{G.LANG}}/group');
    Group = require('../models/group');
    GroupEdit = (function(_super) {
      __extends(GroupEdit, _super);

      function GroupEdit() {
        this.cancel = __bind(this.cancel, this);
        this.save = __bind(this.save, this);
        this.render = __bind(this.render, this);
        this.ajaxError = __bind(this.ajaxError, this);
        _ref = GroupEdit.__super__.constructor.apply(this, arguments);
        return _ref;
      }

      GroupEdit.prototype.events = {
        'submit form': 'save',
        'click [data-save-btn]': 'save',
        'click [data-cancel-btn]': 'cancel'
      };

      GroupEdit.prototype.template = require('../views/group-edit.tpl.html');

      GroupEdit.prototype.init = function() {
        var _this = this;
        Group.on('refresh', this.render);
        Group.on('ajaxError ajaxBizError', this.ajaxError);
        this.routes({
          '!/:id': function(params) {
            return Group.ajaxFetch({
              ajax: {
                id: params.id
              }
            });
          },
          '*glob': function(params) {
            if (params.glob) {
              return rfl.ui.renderInvalidUrl('#main-div');
            } else {
              return _this.render();
            }
          }
        });
        Spine.Route.setup();
        return formUtil.setCommonMsg(langResourceCommon.msg.validator);
      };

      GroupEdit.prototype.ajaxError = function(record, type, res, status, xhr) {
        if (!rfl.ajax.dealCommonCode(res.code)) {
          return rfl.alerts.show(res.message || langResourceCommon.msg.serverBusy, 'error');
        }
      };

      GroupEdit.prototype.render = function() {
        var group;
        group = Group.first();
        return this.html(this.template.render({
          isEdit: !!group,
          data: group || {}
        }));
      };

      GroupEdit.prototype.save = function(evt) {
        var group, valid;
        evt.preventDefault();
        valid = formUtil.validate('#edit-group-form');
        if (!valid.passed) {
          formUtil.focus(valid.failList[0].item);
          return;
        }
        group = Group.first();
        if (group) {
          return group.fromForm('#edit-group-form').ajaxUpdate({
            done: function() {
              return rfl.util.gotoUrl('group/list');
            }
          });
        } else {
          group = new Group();
          return group.fromForm('#edit-group-form').ajaxCreate({
            done: function() {
              return rfl.util.gotoUrl('group/list');
            }
          });
        }
      };

      GroupEdit.prototype.cancel = function() {
        return rfl.util.gotoUrl('group/list');
      };

      return GroupEdit;

    })(Spine.Controller);
    return GroupEdit;
  });

}).call(this);
