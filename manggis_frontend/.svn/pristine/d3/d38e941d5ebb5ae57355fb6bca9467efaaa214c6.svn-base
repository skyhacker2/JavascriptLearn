// Generated by CoffeeScript 1.6.3
(function() {
  var __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  define(function(require) {
    var PermissionGroup, Spine, _ref;
    Spine = require('spine');
    PermissionGroup = (function(_super) {
      __extends(PermissionGroup, _super);

      function PermissionGroup() {
        _ref = PermissionGroup.__super__.constructor.apply(this, arguments);
        return _ref;
      }

      PermissionGroup.configure('PermissionGroup', 'name', 'permissions');

      PermissionGroup.extend(Spine.Model.Ajax);

      PermissionGroup.include(Spine.Model.Ajax);

      PermissionGroup.getGroups = function(permissionIds) {
        var group, groupId, groups, permId, permission, permissionGroupMap, permissionIdMap, res, selectedGroup, _i, _j, _k, _len, _len1, _len2, _name, _ref1;
        groups = this.all();
        permissionGroupMap = {};
        permissionIdMap = {};
        for (_i = 0, _len = groups.length; _i < _len; _i++) {
          group = groups[_i];
          _ref1 = group.permissions;
          for (_j = 0, _len1 = _ref1.length; _j < _len1; _j++) {
            permission = _ref1[_j];
            permissionGroupMap[permission.id] = group;
            permissionIdMap[permission.id] = permission;
          }
        }
        selectedGroup = {};
        for (_k = 0, _len2 = permissionIds.length; _k < _len2; _k++) {
          permId = permissionIds[_k];
          group = permissionGroupMap[permId];
          if (selectedGroup[_name = group.id] == null) {
            selectedGroup[_name] = {
              id: group.id,
              name: group.name,
              permissions: []
            };
          }
          selectedGroup[group.id].permissions.push(permissionIdMap[permId]);
        }
        res = [];
        for (groupId in selectedGroup) {
          group = selectedGroup[groupId];
          res.push(group);
        }
        return res;
      };

      PermissionGroup.getPermissionIds = function(groups) {
        var group, permission, res, _i, _j, _len, _len1, _ref1;
        res = [];
        for (_i = 0, _len = groups.length; _i < _len; _i++) {
          group = groups[_i];
          _ref1 = group.permissions;
          for (_j = 0, _len1 = _ref1.length; _j < _len1; _j++) {
            permission = _ref1[_j];
            res.push(permission.id);
          }
        }
        return res;
      };

      return PermissionGroup;

    })(Spine.Model);
    return PermissionGroup;
  });

}).call(this);
