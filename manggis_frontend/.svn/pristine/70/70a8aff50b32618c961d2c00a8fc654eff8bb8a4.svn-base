// Generated by CoffeeScript 1.6.3
(function() {
  var __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  define(function(require) {
    var $, PairBox, PermissionGroup, Role, RoleEdit, Spine, formUtil, langResourceCommon, langResourceRole, rfl, _ref;
    $ = require('jquery');
    Spine = require('spine');
    rfl = require('rfl');
    PairBox = require('pair-box');
    formUtil = require('form-util');
    langResourceCommon = require('lang/{{G.LANG}}/common');
    langResourceRole = require('lang/{{G.LANG}}/role');
    Role = require('../models/role');
    PermissionGroup = require('../models/permission-group');
    RoleEdit = (function(_super) {
      __extends(RoleEdit, _super);

      function RoleEdit() {
        this.cancel = __bind(this.cancel, this);
        this.save = __bind(this.save, this);
        this.removeAllPermission = __bind(this.removeAllPermission, this);
        this.addAllPermission = __bind(this.addAllPermission, this);
        this.renderPermission = __bind(this.renderPermission, this);
        this.render = __bind(this.render, this);
        this.ajaxError = __bind(this.ajaxError, this);
        _ref = RoleEdit.__super__.constructor.apply(this, arguments);
        return _ref;
      }

      RoleEdit.prototype.events = {
        'submit form': 'save',
        'click [data-save-btn]': 'save',
        'click [data-cancel-btn]': 'cancel',
        'click [data-add-all-btn]': 'addAllPermission',
        'click [data-remove-all-btn]': 'removeAllPermission'
      };

      RoleEdit.prototype.template = require('../views/role-edit.tpl.html');

      RoleEdit.prototype.init = function() {
        var _this = this;
        Role.on('refresh', this.render);
        Role.on('ajaxError ajaxBizError', this.ajaxError);
        PermissionGroup.on('refresh', this.renderPermission);
        PermissionGroup.on('ajaxError ajaxBizError', this.ajaxError);
        this.routes({
          '!/:id': function(params) {
            return Role.ajaxFetch({
              ajax: {
                id: params.id
              }
            });
          },
          '*glob': function(params) {
            if (params.glob) {
              return rfl.ui.renderInvalidUrl('#main-div');
            } else {
              return _this.render();
            }
          }
        });
        Spine.Route.setup();
        return formUtil.setCommonMsg(langResourceCommon.msg.validator);
      };

      RoleEdit.prototype.ajaxError = function(record, type, res, status, xhr) {
        if (!rfl.ajax.dealCommonCode(res.code)) {
          return rfl.alerts.show(res.message || langResourceCommon.msg.serverBusy, 'error');
        }
      };

      RoleEdit.prototype.render = function() {
        var role;
        role = Role.first();
        this.html(this.template.render({
          isEdit: !!role,
          data: role || {}
        }));
        if (this.pairBox) {
          this.pairBox.destroy();
        }
        return PermissionGroup.ajaxFetch();
      };

      RoleEdit.prototype.renderPermission = function() {
        var role;
        role = Role.first();
        return this.pairBox = new PairBox('#available-permissions', '#selected-permissions', PermissionGroup.all(), {
          selectedDataList: PermissionGroup.getGroups((role != null ? role.permissionIds : void 0) || []),
          getStdItem: function(item) {
            return {
              id: item.id,
              name: item.name,
              children: item.permissions
            };
          },
          setChildren: function(item, children) {
            return item.permissions = children;
          }
        });
      };

      RoleEdit.prototype.addAllPermission = function() {
        var _ref1;
        return (_ref1 = this.pairBox) != null ? _ref1.addAll() : void 0;
      };

      RoleEdit.prototype.removeAllPermission = function() {
        var _ref1;
        return (_ref1 = this.pairBox) != null ? _ref1.removeAll() : void 0;
      };

      RoleEdit.prototype.save = function(evt) {
        var permissionIds, role, valid;
        evt.preventDefault();
        valid = formUtil.validate('#edit-role-form');
        if (!valid.passed) {
          formUtil.focus(valid.failList[0].item);
          return;
        }
        permissionIds = PermissionGroup.getPermissionIds(this.pairBox.getSelectedDataList());
        role = Role.first();
        if (role) {
          return role.fromForm('#edit-role-form').load({
            permissionIds: permissionIds
          }).ajaxUpdate({
            done: function() {
              return rfl.util.gotoUrl('role/list');
            }
          });
        } else {
          role = new Role();
          return role.fromForm('#edit-role-form').load({
            permissionIds: permissionIds
          }).ajaxCreate({
            done: function() {
              return rfl.util.gotoUrl('role/list');
            }
          });
        }
      };

      RoleEdit.prototype.cancel = function() {
        return rfl.util.gotoUrl('role/list');
      };

      return RoleEdit;

    })(Spine.Controller);
    return RoleEdit;
  });

}).call(this);
