// Generated by CoffeeScript 1.6.3
(function() {
  var __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  define(function(require) {
    var $, AutoComplete, Group, PairBox, Role, Spine, User, UserEdit, formUtil, langResourceCommon, langResourceUser, rfl, _ref;
    $ = require('jquery');
    Spine = require('spine');
    rfl = require('rfl');
    PairBox = require('pair-box');
    AutoComplete = require('auto-complete');
    formUtil = require('form-util');
    langResourceCommon = require('lang/{{G.LANG}}/common');
    langResourceUser = require('lang/{{G.LANG}}/user');
    User = require('../models/user');
    Group = require('../../group/models/group');
    Role = require('../../role/models/role');
    UserEdit = (function(_super) {
      __extends(UserEdit, _super);

      function UserEdit() {
        this.cancel = __bind(this.cancel, this);
        this.save = __bind(this.save, this);
        this.removeAllGroup = __bind(this.removeAllGroup, this);
        this.addAllGroup = __bind(this.addAllGroup, this);
        this.hideAutoCompleteBox = __bind(this.hideAutoCompleteBox, this);
        this.showAutoCompleteBox = __bind(this.showAutoCompleteBox, this);
        this.render = __bind(this.render, this);
        this.userRefresh = __bind(this.userRefresh, this);
        this.ajaxError = __bind(this.ajaxError, this);
        _ref = UserEdit.__super__.constructor.apply(this, arguments);
        return _ref;
      }

      UserEdit.init = function(options) {
        return this.instance = new UserEdit(options);
      };

      UserEdit.prototype.events = {
        'submit form': 'save',
        'click [data-save-btn]': 'save',
        'click [data-cancel-btn]': 'cancel',
        'click [data-add-all-btn]': 'addAllGroup',
        'click [data-remove-all-btn]': 'removeAllGroup',
        'click [data-show-ac-btn]': 'showAutoCompleteBox',
        'click': 'hideAutoCompleteBox'
      };

      UserEdit.prototype.template = require('../views/user-edit.tpl.html');

      UserEdit.prototype.init = function() {
        var _this = this;
        User.on('refresh', this.userRefresh);
        User.on('ajaxError ajaxBizError', this.ajaxError);
        if (rfl.auth.getData('currentGroup').superGroup) {
          this.groupFetchPromise = Group.ajaxFetch();
        }
        this.roleFetchPromise = Role.ajaxFetch();
        this.routes({
          '!/:id': function(params) {
            return User.ajaxFetch({
              ajax: {
                id: params.id
              }
            });
          },
          '*glob': function(params) {
            if (params.glob) {
              return rfl.ui.renderInvalidUrl('#main-div');
            } else {
              return _this.userRefresh();
            }
          }
        });
        Spine.Route.setup();
        return formUtil.setCommonMsg(langResourceCommon.msg.validator);
      };

      UserEdit.prototype.ajaxError = function(record, type, res, status, xhr) {
        if (!rfl.ajax.dealCommonCode(res.code)) {
          return rfl.alerts.show(res.message || langResourceCommon.msg.serverBusy, 'error');
        }
      };

      UserEdit.prototype.userRefresh = function() {
        var _this = this;
        if (rfl.auth.getData('currentGroup').superGroup) {
          return this.groupFetchPromise.done(function(res) {
            if (res.code === 0) {
              return _this.render();
            }
          });
        } else {
          return this.render();
        }
      };

      UserEdit.prototype.render = function() {
        var user, _ref1, _ref2,
          _this = this;
        user = User.first();
        this.html(this.template.render({
          isEdit: !!user,
          data: user || {}
        }));
        if (rfl.auth.getData('currentGroup').superGroup) {
          return this.renderGroup();
        } else {
          return this.initAutoComplete('#edit-user-roles', {
            excludeExist: true,
            nameMaxLength: 70,
            initData: (user != null ? (_ref1 = user.groups) != null ? (_ref2 = _ref1[0]) != null ? _ref2.roles : void 0 : void 0 : void 0) || [],
            listStyle: {
              width: '542px'
            },
            onKeydown: function(evt) {
              if (evt.keyCode === 13 && !_this.autoComplete.isListShown()) {
                return _this.save();
              }
            }
          });
        }
      };

      UserEdit.prototype.renderGroup = function() {
        var groups, selectedDataList, user;
        user = User.first();
        groups = Group.all();
        selectedDataList = user != null ? user.groups : void 0;
        if (selectedDataList == null) {
          selectedDataList = groups.length === 1 ? [groups[0]] : [];
        }
        if (this.pairBox) {
          this.pairBox.destroy();
        }
        return this.pairBox = new PairBox('#available-groups', '#selected-groups', groups, {
          selectedDataList: selectedDataList,
          selectedListTpl: require('../views/user-edit-selected-groups.tpl.html')
        });
      };

      UserEdit.prototype.initAutoComplete = function(box, opt, callback) {
        var _this = this;
        return this.roleFetchPromise.done(function(res) {
          if (res.code === 0) {
            _this.autoComplete = new AutoComplete(box, $.extend({
              richSelectionResult: true,
              listMaxLength: 6,
              listTpl: require('../views/user-edit-auto-complete-list.tpl.html'),
              dataSource: Role.all()
            }, opt));
            return typeof callback === "function" ? callback() : void 0;
          }
        });
      };

      UserEdit.prototype.showAutoCompleteBox = function(evt) {
        var doShow, groupId, offset, target,
          _this = this;
        evt.stopPropagation();
        target = evt.currentTarget;
        groupId = $(target).data('id');
        offset = $(target).offset();
        this.curEditGroup = this.pairBox.getSelectedItemById(groupId);
        doShow = function() {
          $(target).css('visibility', 'hidden');
          _this.autoCompleteBox.css({
            left: (offset.left + 10) + 'px',
            top: (offset.top + 2) + 'px'
          });
          _this.autoCompleteBox.show();
          return setTimeout(function() {
            _this.autoCompleteBox.find('input')[0].focus();
            return 200;
          });
        };
        if (!this.autoCompleteBox) {
          this.autoCompleteBox = $('<div class="form-inline float-auto-complete-box" style="position: absolute; display: none;"><input type="text" class="form-control" data-rfl-cancel-bubble="click" style="margin-bottom: 5px; width: 300px;" /> <button class="btn btn-default close-float-auto-complete-box-btn" style="margin-bottom: 5px;">' + langResourceCommon.label.done + '</button></div>').appendTo(this.el);
          return this.initAutoComplete(this.autoCompleteBox.find('input'), {
            richSelectionResult: true,
            nameMaxLength: 36,
            initData: this.curEditGroup.roles,
            listStyle: {
              width: '282px'
            },
            onKeydown: function(evt) {
              if (evt.keyCode === 13 && !_this.autoComplete.isListShown()) {
                return _this.hideAutoCompleteBox(evt);
              }
            }
          }, function() {
            return doShow();
          });
        } else {
          doShow();
          return this.autoComplete.setSelectedData(this.curEditGroup.roles);
        }
      };

      UserEdit.prototype.hideAutoCompleteBox = function(evt) {
        if (!this.autoCompleteBox) {
          return;
        }
        if ($(evt.target.parentNode).hasClass('auto-complete-rich-item')) {
          return;
        }
        if (evt.type === 'click' && $(evt.target).closest('.float-auto-complete-box').length && !$(evt.target).hasClass('close-float-auto-complete-box-btn')) {
          return;
        }
        this.curEditGroup.roles = this.autoComplete.getSelectedDataList();
        this.pairBox.render();
        return this.autoCompleteBox.hide();
      };

      UserEdit.prototype.addAllGroup = function() {
        var _ref1;
        return (_ref1 = this.pairBox) != null ? _ref1.addAll() : void 0;
      };

      UserEdit.prototype.removeAllGroup = function() {
        var _ref1;
        return (_ref1 = this.pairBox) != null ? _ref1.removeAll() : void 0;
      };

      UserEdit.prototype.save = function(evt) {
        var groups, roleIds, user, valid;
        if (evt != null) {
          evt.preventDefault();
        }
        valid = formUtil.validate('#edit-user-form');
        if (!valid.passed) {
          formUtil.focus(valid.failList[0].item);
          return;
        }
        groups = rfl.auth.getData('currentGroup').superGroup ? this.pairBox.getSelectedDataList(function(item) {
          var res, role, _i, _len, _ref1;
          res = {
            id: item.id,
            roleIds: []
          };
          if (item.roles) {
            _ref1 = item.roles;
            for (_i = 0, _len = _ref1.length; _i < _len; _i++) {
              role = _ref1[_i];
              res.roleIds.push(role.id);
            }
          }
          return res;
        }) : [];
        roleIds = rfl.auth.getData('currentGroup').superGroup ? [] : this.autoComplete.getSelectedPropList('id');
        user = User.first();
        if (user) {
          return user.fromForm('#edit-user-form').load({
            groups: groups,
            roleIds: roleIds
          }).ajaxUpdate({
            done: function() {
              return rfl.util.gotoUrl('user/list');
            }
          });
        } else {
          user = new User();
          return user.fromForm('#edit-user-form').load({
            groups: groups,
            roleIds: roleIds
          }).ajaxCreate({
            done: function() {
              return rfl.util.gotoUrl('user/list');
            }
          });
        }
      };

      UserEdit.prototype.cancel = function() {
        return rfl.util.gotoUrl('user/list');
      };

      return UserEdit;

    })(Spine.Controller);
    return UserEdit;
  });

}).call(this);
