// Generated by CoffeeScript 1.6.3
(function() {
  var __slice = [].slice;

  define(function(require) {
    var $, bootstrap, fullScreenPage, langResourceCampaign, langResourceCommon, mainTpl, render, rfl, shortcutSave, _HTML_BODY_MARK, _bindEvent, _ckeditor, _code, _codemirror, _getCurrentCode, _initCkeditor, _initCodeMirror, _marks, _render, _saveUploaded, _setCode, _switchTab;
    $ = require('jquery');
    bootstrap = require('bootstrap');
    rfl = require('rfl');
    fullScreenPage = require('mod/nav-bar/full-screen-page');
    langResourceCommon = require("../../lang/" + G.LANG + "/common");
    langResourceCampaign = require("../../lang/" + G.LANG + "/campaign");
    mainTpl = require('./edit-content-upload-edit.tpl.html');
    shortcutSave = require('mod/campaign/save');
    _HTML_BODY_MARK = '{{__HTML_BODY_MARK__}}';
    _marks = null;
    _codemirror = null;
    _ckeditor = null;
    _code = null;
    _getCurrentCode = function() {
      var code;
      if ($('.header-tabs li:first').hasClass('on')) {
        code = _ckeditor != null ? _ckeditor.getData() : void 0;
        if (code !== void 0) {
          if (_code.body) {
            return _code.wrapper.replace(_HTML_BODY_MARK, code);
          } else {
            return code;
          }
        }
      } else {
        return _codemirror != null ? _codemirror.getValue() : void 0;
      }
    };
    _saveUploaded = function(step) {
      var pageData;
      pageData = rfl.pageStorage.get();
      return rfl.ajax.put({
        url: "lists/campaigns/" + _marks[3] + "/content",
        data: {
          html: _getCurrentCode(),
          contentEditor: rfl.config.CAMPAIGN_CONTENT_EDITOR.CKEDITOR,
          config: ''
        },
        success: function(res) {
          if (res.code === 0) {
            if (~G.CDN_ORIGIN.indexOf('http://cdn.manggis.internal')) {
              $.ajax({
                type: 'GET',
                url: 'http://snapshot.manggis.internal/campaign/snapshot',
                data: {
                  campaignId: _marks[3],
                  url: "http://controller.manggis.internal/controller/lists/campaigns/" + _marks[3] + "/snapshot.xhtml"
                },
                success: function() {}
              });
            }
            if (step) {
              return require(['./edit'], function(mod) {
                return mod.gotoStep(step);
              });
            } else {
              return rfl.alerts.show(res.message, 'success');
            }
          } else {
            return rfl.alerts.show(res.message, 'error');
          }
        },
        error: function() {
          return rfl.alerts.show(langResourceCommon.msg.serverBusy, 'error');
        }
      });
    };
    _bindEvent = function() {
      shortcutSave.bind(function() {
        return _saveUploaded();
      });
      rfl.Delegator.getPageDelegator().delegate('click', 'switchCampaignContentTab', function(evt, tab) {
        return _switchTab(tab);
      }, 1).delegate('click', 'saveUploadedCode', function(evt, step) {
        return _saveUploaded(step);
      }, 1).delegate('click', 'uploadSendSample', function(evt) {
        return require(['./sample-sender-main'], function(sender) {
          var code, pageData;
          code = _getCurrentCode();
          if (code !== void 0) {
            pageData = rfl.pageStorage.get();
            return sender.show(pageData.urlParams.listId, _marks[3], code);
          }
        });
      }, 1).delegate('click', 'previewUploadedContent', function(evt) {
        return require(['./preview-main'], function(mod) {
          var code, pageData;
          code = _getCurrentCode();
          if (code !== void 0) {
            pageData = rfl.pageStorage.get();
            return mod.init(pageData.urlParams.listId, _marks[3], {
              content: code
            });
          }
        });
      }, 1).delegate('click', 'codeInsertCustomerProperty', function(evt) {
        return require(['lib/ckeditor-4.2.1/plugins/ripersonalizer/dialog-main'], function(dialog) {
          return dialog.show({
            insertHtml: function(content) {
              var cursor;
              if (_codemirror) {
                cursor = _codemirror.getCursor();
                return _codemirror.replaceRange(content, cursor, cursor);
              }
            }
          }, {
            placement: 'right'
          });
        });
      }, 1).delegate('click', 'codeInsertLinkage', function(evt) {
        return require(['lib/ckeditor-4.2.1/plugins/rilink/dialog-main'], function(dialog) {
          return dialog.show({
            insertHtml: function(content) {
              var cursor;
              if (_codemirror) {
                cursor = _codemirror.getCursor();
                return _codemirror.replaceRange(content, cursor, cursor);
              }
            }
          }, {
            placement: 'right'
          });
        });
      }, 1);
      return _bindEvent = rfl.empty;
    };
    _switchTab = function(tab) {
      if (tab === '2') {
        $('.header-tabs li:first').removeClass('on');
        $('.ckeditor-wrapper').addClass('display-none');
        $('.header-tabs li:last').addClass('on');
        $('.codemirror-wrapper').removeClass('display-none');
        if (_codemirror) {
          _codemirror.setValue(_code.body ? _code.wrapper.replace(_HTML_BODY_MARK, _ckeditor.getData()) : _ckeditor.getData());
        } else {
          _initCodeMirror();
        }
        return rfl.localStorage.set('PREFER_CONTENT_EDITOR', 'CODE');
      } else {
        $('.header-tabs li:last').removeClass('on');
        $('.codemirror-wrapper').addClass('display-none');
        $('.header-tabs li:first').addClass('on');
        $('.ckeditor-wrapper').removeClass('display-none');
        if (_codemirror) {
          _setCode(_codemirror.getValue());
        }
        _initCkeditor();
        return rfl.localStorage.set('PREFER_CONTENT_EDITOR', 'DESIGN');
      }
    };
    _initCodeMirror = function() {
      var val;
      rfl.css.load('js/lib/codemirror/codemirror.css');
      val = _ckeditor ? _ckeditor.getData() : $('[name="ckeditor"]').val();
      return require(['codemirror'], function(CodeMirror) {
        $('.codemirror-container .ajax-loading-s').remove();
        return _codemirror = new CodeMirror($('.codemirror-container')[0], {
          value: !val ? _code.origin : _code.body ? _code.wrapper.replace(_HTML_BODY_MARK, val) : val,
          mode: 'text/html',
          autoCloseTags: true,
          lineNumbers: true
        });
      });
    };
    _initCkeditor = function() {
      $('[name="ckeditor"]').val(_code.body || _code.origin);
      return require(['ckeditor'], function(CKEDITOR) {
        if (_ckeditor) {
          _ckeditor.destroy();
        }
        return _ckeditor = CKEDITOR.replace('ckeditor', {
          allowedContent: true,
          customConfig: '',
          height: '307',
          enterMode: CKEDITOR.ENTER_BR,
          shiftEnterMode: CKEDITOR.ENTER_P,
          extraPlugins: 'ripersonalizer,rilink,tableresize',
          toolbarGroups: [
            {
              name: 'clipboard',
              groups: ['clipboard', 'undo']
            }, {
              name: 'editing',
              groups: ['find']
            }, '/', {
              name: 'basicstyles',
              groups: ['basicstyles', 'cleanup']
            }, {
              name: 'paragraph',
              groups: ['list', 'indent', 'blocks', 'align']
            }, {
              name: 'links'
            }, {
              name: 'insert'
            }, '/', {
              name: 'styles'
            }, {
              name: 'colors'
            }, {
              name: 'tools'
            }, {
              name: 'others'
            }, {
              name: 'ri',
              groups: ['ripersonalizer', 'rilink']
            }
          ]
        });
      });
    };
    _setCode = function(code) {
      _code = {
        origin: code,
        wrapper: '',
        body: ''
      };
      return _code.wrapper = code.replace(/\s*(<body>|<body [^>]+>)([\s\S]*)<\/body>/i, function($0, $1, $2) {
        _code.body = $2;
        return "\n" + $1 + "\n" + _HTML_BODY_MARK + "\n</body>";
      });
    };
    _render = function(mark, action, base64Info, step, sid) {
      if (action == null) {
        action = 'create';
      }
      if (!sid) {
        rfl.ui.renderInvalidUrl('#main-div');
        return;
      }
      _marks = [action, base64Info, step, sid];
      _bindEvent();
      return require(['./edit'], function(mod) {
        return mod.getContentData(function(res) {
          var pageData;
          if (res.code === 0) {
            pageData = rfl.pageStorage.get() || {};
            $('#main-div').html(mainTpl.render({
              listId: pageData.urlParams.listId,
              marks: _marks,
              urlParams: pageData.urlParams,
              url: {
                uploadNew: ("html/campaign/edit-" + G.LANG + ".html#!") + [action, base64Info, 'content-upload', sid].join('/')
              },
              data: res.data,
              lang: {
                common: langResourceCommon,
                campaign: langResourceCampaign
              }
            }));
            _setCode(res.data.html);
            if ('CODE' === rfl.localStorage.get('PREFER_CONTENT_EDITOR')) {
              return _switchTab('2');
            } else {
              return _switchTab('1');
            }
          } else if (res.code === rfl.config.RES_CODE.RESOURCE_NOT_EXIST) {
            return rfl.ui.renderInvalidUrl('#main-div');
          } else {
            return rfl.ui.renderPageLoadError('#main-div', {
              content: res.message
            });
          }
        });
      });
    };
    render = function() {
      _codemirror = null;
      _ckeditor = null;
      _code = null;
      return rfl.ajax.history.dispatch(function() {
        var args;
        args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
        return _render.apply(null, args);
      });
    };
    return {
      render: render
    };
  });

}).call(this);
