// Generated by CoffeeScript 1.6.3
(function() {
  var __slice = [].slice;

  define(function(require) {
    var $, FileUploader, fullScreenPage, langResourceCampaign, langResourceCommon, mainTpl, render, rfl, _bindEvent, _initUploader, _marks, _render;
    $ = require('jquery');
    rfl = require('rfl');
    FileUploader = require('file-uploader');
    fullScreenPage = require('mod/nav-bar/full-screen-page');
    langResourceCommon = require("../../lang/" + G.LANG + "/common");
    langResourceCampaign = require("../../lang/" + G.LANG + "/campaign");
    mainTpl = require('./edit-content-select-type.tpl.html');
    _marks = null;
    _bindEvent = function() {
      rfl.Delegator.getPageDelegator().delegate('click', 'selectContentType', function(evt, type) {
        return rfl.ajax.history.dispatch(function(mark, action, base64Info, step, sid) {
          if (action == null) {
            action = 'create';
          }
          if (base64Info == null) {
            base64Info = '';
          }
          if (type === 'builder') {
            step = 'content-select-tpl';
          } else {
            step = 'content-upload';
          }
          return location.hash = '!' + [action, base64Info, step, sid].join('/');
        });
      }, 2);
      return _bindEvent = rfl.empty;
    };
    _initUploader = function() {
      var pageData;
      pageData = rfl.pageStorage.get();
      return new FileUploader('#file-drop-area', {
        enableDropFile: true,
        enableMultipleSelection: false,
        fileParamName: 'campaignFile',
        onBeforeUpload: function(uploading, callback) {
          var fileExtName;
          fileExtName = uploading.fileExtName.toLowerCase();
          if (fileExtName !== '.html' && fileExtName !== '.htm' && fileExtName !== '.zip') {
            rfl.alerts.show('You can only upload HTML or ZIP file.', 'error');
            callback(false);
            return;
          }
          return rfl.ajax.getUploadOpt('lists/campaigns/' + _marks[3] + '/upload', (uploading.from === 'DROP' ? 'json' : 'xhtml'), function(opt) {
            $('.campaign-type-btn, .section-divider').hide();
            $('#progress-bar').show();
            callback($.extend(opt, {
              data: {
                contentEditor: rfl.config.CAMPAIGN_CONTENT_EDITOR.CKEDITOR
              }
            }));
            return rfl.ajax.showLoading();
          });
        },
        onDragenter: function() {
          return $('#file-drop').addClass('drop-enter');
        },
        onDragleave: function() {
          return $('#file-drop').removeClass('drop-enter');
        },
        onDrop: function() {
          return $('#file-drop').removeClass('drop-enter');
        },
        onProgress: function(uploading, progress) {
          $('#progress-bar .progress-text').html(progress + '%');
          return $('#progress-bar .progress-bar').css('width', progress + '%');
        },
        onLoad: function(uploading, res) {
          if (!rfl.ajax.dealCommonCode(res.code)) {
            if (res.code === 0) {
              $('#progress-bar .progress-text').html('100%');
              $('#progress-bar .progress-bar').css('width', '100%');
              return rfl.ajax.history.dispatch(function(mark, action, base64Info, step, sid) {
                if (action == null) {
                  action = 'create';
                }
                if (base64Info == null) {
                  base64Info = '';
                }
                return location.hash = '!' + [action, base64Info, 'content-upload-edit', sid].join('/');
              });
            } else {
              $('#progress-bar').hide();
              $('.campaign-type-btn, .section-divider').show();
              $('#progress-bar .progress-text').html('0%');
              $('#progress-bar .progress-bar').css('width', '0%');
              return rfl.alerts.show(res.message, 'error');
            }
          } else {
            $('#progress-bar').hide();
            $('.campaign-type-btn, .section-divider').show();
            $('#progress-bar .progress-text').html('0%');
            return $('#progress-bar .progress-bar').css('width', '0%');
          }
        },
        onError: function(uploading) {
          $('#progress-bar').hide();
          $('.campaign-type-btn, .section-divider').show();
          return rfl.alerts.show(langResourceCommon.msg.serverBusy, 'error');
        },
        onComplete: function(uploading) {
          return rfl.ajax.hideLoading();
        }
      });
    };
    _render = function(mark, action, base64Info, step, sid) {
      var pageData;
      if (action == null) {
        action = 'create';
      }
      if (!sid) {
        rfl.ui.renderInvalidUrl('#main-div');
        return;
      }
      _marks = [action, base64Info, step, sid];
      pageData = rfl.pageStorage.get() || {};
      _bindEvent();
      return rfl.ajax.get({
        url: "lists/campaigns/" + _marks[3] + "/overview",
        success: function(res) {
          if (res.code === 0) {
            $('#main-div').html(mainTpl.render({
              CAMPAIGN_CONTENT_EDITOR: rfl.config.CAMPAIGN_CONTENT_EDITOR,
              listId: pageData.urlParams.listId,
              campaignName: res.data.name,
              contentEditor: res.data.campaign.contentEditor,
              marks: _marks,
              urlParams: pageData.urlParams,
              lang: {
                common: langResourceCommon,
                campaign: langResourceCampaign
              }
            }));
            fullScreenPage.checkScroll('.app-content-wrapper');
            return _initUploader();
          } else if (res.code === rfl.config.RES_CODE.RESOURCE_NOT_EXIST) {
            return rfl.ui.renderInvalidUrl('#main-div');
          } else {
            return rfl.ui.renderPageLoadError('#main-div', {
              content: res.message
            });
          }
        },
        error: function() {
          return rfl.ui.renderPageLoadError('#main-div');
        }
      });
    };
    render = function() {
      return rfl.ajax.history.dispatch(function() {
        var args;
        args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
        return _render.apply(null, args);
      });
    };
    return {
      render: render
    };
  });

}).call(this);
