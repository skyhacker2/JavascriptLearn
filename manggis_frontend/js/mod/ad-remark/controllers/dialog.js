// Generated by CoffeeScript 1.6.3
(function() {
  var __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  define(function(require) {
    var $, AdRemark, AutoComplete, Dialog, Domain, Spine, domainTest, formUtil, langResourceAdRemark, langResourceCommon, rfl, _ref;
    $ = require('jquery');
    Spine = require('spine');
    rfl = require('rfl');
    langResourceCommon = require('lang/{{G.LANG}}/common');
    langResourceAdRemark = require('lang/{{G.LANG}}/ad-remark');
    AdRemark = require('../models/ad-remark');
    Domain = require('../models/domain');
    AutoComplete = require('auto-complete');
    formUtil = require('form-util');
    domainTest = /^([a-zA-Z0-9\-]{1,63}\.)+[a-zA-Z0-9\-]{1,63}$/;
    Dialog = (function(_super) {
      __extends(Dialog, _super);

      function Dialog() {
        this.getAutoCompleteGroup = __bind(this.getAutoCompleteGroup, this);
        this.submit = __bind(this.submit, this);
        this.show = __bind(this.show, this);
        _ref = Dialog.__super__.constructor.apply(this, arguments);
        return _ref;
      }

      Dialog.prototype.init = function() {
        return formUtil.setCommonMsg(langResourceCommon.msg.validator);
      };

      Dialog.prototype.dialogTpl = require('../views/ad-remark-dialog.tpl.html');

      Dialog.prototype.validateDomain = function() {
        var groupDataLen;
        groupDataLen = this.autoCompleteGroup.getSelectedDataList().length;
        if (!groupDataLen) {
          formUtil.highLight($('#domains'), langResourceCommon.msg.validator.mandatory);
        } else {
          formUtil.highLight($('#domains'), '', '');
        }
        if (groupDataLen) {
          return true;
        } else {
          return false;
        }
      };

      Dialog.prototype.validateRemark = function() {
        return formUtil.validate($('#new-remark-form', this.dialog));
      };

      Dialog.prototype.show = function(adRemark) {
        var _this = this;
        this.dialog = rfl.dialog.create({
          title: '[AD] Subject Suffix',
          content: this.dialogTpl.render({
            data: adRemark || {}
          }),
          btns: [
            {
              text: adRemark ? 'Update' : 'Create',
              className: 'btn-primary',
              click: (function() {
                return _this.submit(adRemark);
              })
            }, {
              text: 'Cancel',
              dismiss: true
            }
          ]
        });
        return setTimeout((function() {
          return _this.getAutoCompleteGroup(adRemark);
        }), 500);
      };

      Dialog.prototype.submit = function(adRemark) {
        var ar, data, domain, domainsValid, ds, valid, _i, _len, _ref1;
        valid = this.validateRemark();
        domainsValid = this.validateDomain();
        if (valid.passed && domainsValid) {
          data = formUtil.getData($('#new-remark-form'), this.dialog);
          data.domains = this.autoCompleteGroup.getSelectedDataList('name');
          console.log(data.domains);
          ds = [];
          _ref1 = data.domains;
          for (_i = 0, _len = _ref1.length; _i < _len; _i++) {
            domain = _ref1[_i];
            ds.push(domain.name);
          }
          data.domains = ds;
          if (adRemark) {
            adRemark.load({
              domains: data.domains
            });
            adRemark.ajaxUpdate();
          } else {
            ar = new AdRemark({
              domains: data.domains,
              remark: data.remark
            });
            ar.ajaxCreate();
          }
          return this.dialog.modal('hide');
        } else {
          if (domainsValid) {
            return formUtil.focus(valid.failList[0].item);
          } else {
            return formUtil.focus('#domains');
          }
        }
      };

      Dialog.prototype.getAutoCompleteGroup = function(adRemark) {
        var d, dataSource, initData, name, _autoCompleteGroup, _i, _len, _ref1;
        initData = [];
        if (adRemark) {
          _ref1 = adRemark.domains;
          for (_i = 0, _len = _ref1.length; _i < _len; _i++) {
            name = _ref1[_i];
            d = Domain.findByAttribute("name", name) || new Domain({
              id: Domain.count() + 1,
              name: name
            });
            d.save();
            console.log(d);
            initData.push(d);
          }
        }
        dataSource = Domain.all();
        _autoCompleteGroup = new AutoComplete('#domains', {
          richSelectionResult: true,
          dataSource: dataSource,
          initData: initData,
          separator: '; ',
          noResultMsg: '',
          onKeyup: function(evt) {
            if (evt.keyCode === 13 || (evt.keyCode > 36 && evt.keyCode < 41)) {
              return;
            }
            dataSource.length = 0;
            if (this.value !== '' && !Domain.findByAttribute("name", this.value) && domainTest.test(this.value)) {
              d = new Domain({
                id: Domain.count() + 1,
                name: this.value
              });
              dataSource.push(d);
            }
            return Domain.each(function(domain) {
              return dataSource.push(domain);
            });
          },
          onSelect: function(item) {
            if (!Domain.findByAttribute("name", item.name)) {
              d = new Domain({
                id: item.id,
                name: item.name
              });
              d.save();
            }
            this.value = '';
            return this.focus();
          },
          onBlur: function() {
            var _j, _len1;
            console.log(this.value);
            for (_j = 0, _len1 = dataSource.length; _j < _len1; _j++) {
              d = dataSource[_j];
              if (d.name === this.value.replace(';', '')) {
                d.save();
                _autoCompleteGroup.addSelectedItem(d);
              }
            }
            return this.value = '';
          },
          onFocus: function() {
            return false;
          }
        });
        _autoCompleteGroup._box.on('paste', function() {
          var _this = this;
          return setTimeout((function() {
            var item, v, value, values, _j, _len1;
            console.log(_this.value);
            values = _this.value.split(';');
            for (_j = 0, _len1 = values.length; _j < _len1; _j++) {
              v = values[_j];
              value = $.trim(v);
              if (domainTest.test(value)) {
                if (Domain.findByAttribute("name", value)) {
                  item = Domain.findByAttribute("name", value);
                  _autoCompleteGroup.addSelectedItem(item);
                } else {
                  item = new Domain({
                    id: Domain.count() + 1,
                    name: value
                  });
                  item.save();
                  dataSource.push(item);
                  _autoCompleteGroup.addSelectedItem(item);
                }
              }
            }
            return _this.value = '';
          }), 0);
        });
        return this.autoCompleteGroup = _autoCompleteGroup;
      };

      return Dialog;

    })(Spine.Controller);
    return Dialog;
  });

}).call(this);
