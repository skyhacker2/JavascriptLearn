// Generated by CoffeeScript 1.6.3
(function() {
  var __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  define(function(require) {
    var Group, Spine, _ref;
    Spine = require('spine');
    Group = (function(_super) {
      __extends(Group, _super);

      function Group() {
        _ref = Group.__super__.constructor.apply(this, arguments);
        return _ref;
      }

      Group.configure('Group', 'name', 'enabled', 'superGroup');

      Group.extend(Spine.Model.Ajax);

      Group.include(Spine.Model.Ajax);

      Group.prototype.ajaxToggle = function(options) {
        var _this = this;
        if (options == null) {
          options = {};
        }
        return this.ajax().ajaxQueue({
          type: 'PUT',
          url: this.url(this.enabled ? 'deactivate' : 'activate')
        }).done(function(res, status, xhr) {
          var _ref1, _ref2;
          if (res.code === 0) {
            _this.updateAttribute('enabled', !_this.enabled);
            _this.trigger('ajaxSuccess', 'toggle', res, status, xhr);
            return (_ref1 = options.done) != null ? _ref1.apply(_this.record, [res, status, xhr]) : void 0;
          } else {
            _this.trigger('ajaxBizError', 'toggle', res, status, xhr);
            return (_ref2 = options.done) != null ? _ref2.apply(_this.record, [res, status, xhr]) : void 0;
          }
        }).fail(function(xhr, statusText, error) {
          var res, _ref1;
          res = {
            code: -1
          };
          _this.trigger('ajaxError', 'toggle', res, statusText, xhr);
          return (_ref1 = options.fail) != null ? _ref1.apply(_this.record, [xhr, statusText, error]) : void 0;
        });
      };

      return Group;

    })(Spine.Model);
    return Group;
  });

}).call(this);
