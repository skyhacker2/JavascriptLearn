var xforjs = require('xforjs');
var http = require('http');
var fs = require('fs');
var assert = require('assert');

var page = fs.readFileSync('page.xjs', 'utf-8');
var compiler = xforjs.getCompiler({global:false,removelogs:false});
var compiled = compiler.compile(page);
var params = {
   fn:{
      cleanURL:function(url){
         if(url){
            return (''+url).replace(/(?:%20)+/g, ' ');
         } else {
            return url;
         }
      }
   }  
};
var templates=eval(compiled);

assert(fs.existsSync('songs'), "You must create the songs directory first.");
assert(fs.statSync('songs').isDirectory(), "The songs directory is apparently a file.");

http.createServer(function(req,res){
   try {
      var songs = fs.readdirSync('songs');
      var url = req.url;
      var action = url.replace(/\/([^\/]+)\/.+/, '$1');
      console.log(action);

      switch(action){
      case 'songs':
         res.writeHead(200, {
            'Content-Type': 'audio/mpeg'
         });
         res.end(fs.readFileSync(url.replace('/', '')), 'mpeg-1');
         break;
      case 'favicon.ico':
         res.writeHead(200, {
            'Content-Type': 'image/vnd.microsoft.icon'
         });
         res.end('');
         break;
      case '/':
         res.writeHead(200, {
            'Content-Type': 'text/html'
         });
         res.end(
            templates.player.page({
               "songs":songs
            },
            params
            )
         );
         break;
      default:
         res.end("Invalid action: "+action);
      }
   } catch(e) {
      console.log(e);
      res.end("Something very bad happened.  Check the console.");
   }

}).listen(2000, 'localhost');
