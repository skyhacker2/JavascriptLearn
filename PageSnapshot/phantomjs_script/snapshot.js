// Generated by CoffeeScript 1.6.3
(function() {
  var Job, Snapshot, Webpage, config, snapshot, system,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  Webpage = require('webpage');

  system = require('system');

  config = require('./config.js');

  Job = require('../job');

  Snapshot = (function() {
    function Snapshot() {
      this.begin = __bind(this.begin, this);
      this.doJob = __bind(this.doJob, this);
      this.count = 0;
    }

    Snapshot.prototype.onFinishOne = function() {
      this.count += 1;
      if (this.count === this.jobs.jobList.length) {
        console.log('phantom exit()');
        return phantom.exit(0);
      } else {
        console.log(this.count);
        return console.log(this.jobs.jobList.length);
      }
    };

    Snapshot.prototype.doJob = function(job) {
      var key, page, val, _ref,
        _this = this;
      page = Webpage.create();
      page.viewportSize = config.viewportSize;
      _ref = config.settings;
      for (key in _ref) {
        val = _ref[key];
        page.settings[key] = val;
      }
      return page.open(job.url, function(status) {
        var data;
        if (status === 'fail') {
          data = {
            job: job,
            status: 'fail'
          };
        } else {
          page.render(job.path);
          data = {
            job: job,
            status: 'success'
          };
        }
        console.log(JSON.stringify(data));
        return _this.onFinishOne();
      });
    };

    Snapshot.prototype.begin = function(jobs) {
      var job, _i, _len, _ref, _results;
      _ref = jobs.jobList;
      _results = [];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        job = _ref[_i];
        _results.push(this.doJob(job));
      }
      return _results;
    };

    Snapshot.prototype.init = function() {
      if (system.args.length < 2 || system.args.length > 2) {
        console.log('Usage: snapshot.js {"jobList": [{"url":"www.example.com", "path":"./example.png"}]}');
        return phantom.exit(1);
      } else {
        this.jobs = JSON.parse(system.args[1]);
        this.jobs = JSON.parse(this.jobs);
        return this.begin(this.jobs);
      }
    };

    return Snapshot;

  })();

  snapshot = new Snapshot();

  snapshot.init();

}).call(this);
